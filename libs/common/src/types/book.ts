// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.20.3
// source: proto/book.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "./baseTypes";

export const protobufPackage = "book";

export interface CreateBookDto {
  name: string;
  description: string;
  isSale: boolean;
}

export interface UpdateBookDto {
  id: string;
  name: string;
  description: string;
  isSale: boolean;
}

export interface FindOneBookDto {
  id: string;
}


export interface Books {
  books: Book[];
}

export interface Book {
  id: string;
  isActive: boolean;
  isDeleted: boolean;
  createdAt: number;
  updatedAt: number;
  deletedAt: number;
  name: string;
  description: string;
  isSale: boolean;
}

export const BOOK_PACKAGE_NAME = "book";

export interface BooksServiceClient {
  createBook(request: CreateBookDto): Observable<Book>;

  findAllBooks(request: Empty): Observable<Books>;

  findOneBook(request: FindOneBookDto): Observable<Book>;

  updateBook(request: UpdateBookDto): Observable<Book>;

  removeBook(request: FindOneBookDto): Observable<Book>;
}

export interface BooksServiceController {
  createBook(request: CreateBookDto): Promise<Book> | Observable<Book> | Book;

  findAllBooks(request: Empty): Promise<Books> | Observable<Books> | Books;

  findOneBook(request: FindOneBookDto): Promise<Book> | Observable<Book> | Book;

  updateBook(request: UpdateBookDto): Promise<Book> | Observable<Book> | Book;

  removeBook(request: FindOneBookDto): Promise<Book> | Observable<Book> | Book;
}

export function BooksServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createBook", "findAllBooks", "findOneBook", "updateBook", "removeBook"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("BooksService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("BooksService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const BOOKS_SERVICE_NAME = "BooksService";
